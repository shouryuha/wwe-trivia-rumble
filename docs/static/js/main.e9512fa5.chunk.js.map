{"version":3,"sources":["logo.svg","triviaList.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","backgroundColor","borderRadius","titlePage","padding","textAlign","color","bullet","display","margin","transform","input","width","outline","border","label","fontSize","title","pos","marginBottom","answer","paddingTop","searchTermLength","table","tableHead","tableBody","TriviaList","useState","maxNum","setMaxNum","triviaObj","setTriviaObj","searchTerm","setSearchTerm","setSearchTermLength","questions","setQuestions","filteredQuestions","setFilteredQuestions","classes","useEffect","axios","get","then","response","data","results","filter","man","Question","toLowerCase","includes","length","slice","Container","className","noValidate","autoComplete","InputLabel","htmlFor","Select","labelId","id","value","onChange","event","target","MenuItem","Input","e","startAdornment","InputAdornment","position","onClick","TableContainer","Table","size","TableHead","TableRow","style","borderBottom","TableCell","align","TableBody","map","row","component","scope","Answer","height","backgroundImage","Id","backgroundSize","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,I,2KC6Bf,IAAMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,gBAAiB,UACjBC,aAAc,QAEhBC,UAAW,CACTC,QAAS,OACTC,UAAW,SACXC,MAAO,WAETC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLV,gBAAiB,wBACjBK,MAAO,UACPG,OAAQ,mBACRL,QAAS,OACTQ,MAAO,OACPC,QAAS,OACTC,OAAQ,GAEVC,MAAO,CACLC,SAAU,GACVV,MAAO,UACPF,QAAS,QAEXa,MAAO,CACLD,SAAU,GACVV,MAAO,WAETY,IAAK,CACHC,aAAc,IAEhBC,OAAQ,CACNJ,SAAU,GACVV,MAAO,UACPe,WAAY,QAEdC,iBAAkB,CAChBhB,MAAO,UACPF,QAAS,QAEXmB,MAAO,CACLtB,gBAAiB,wBACjBC,aAAc,OAEhBsB,UAAW,CACTlB,MAAO,UACPF,QAAS,qBAEXqB,UAAW,CACTnB,MAAO,aAyLIoB,MArLf,WAEE,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAgDN,mBAAS,GAAzD,mBAAOL,EAAP,KAAyBY,EAAzB,KACA,EAAkCP,mBAAS,IAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAAkDT,mBAAS,IAA3D,mBAAOU,EAAP,KAA0BC,EAA1B,KACMC,EAAU1C,IAiChB,OA/BA2C,qBAAU,WAERC,IAAMC,IAAI,qEADG,CAAC,cAAiB,qEAE9BC,MAAK,SAAAC,GACJb,EAAaa,EAASC,WAGvB,IAEHL,qBAAU,WACR,IAAMM,EAAUhB,EAAUiB,QAAO,SAACC,GAAD,OAC/BA,EAAIC,SAASC,cAAcC,SAASnB,EAAWkB,kBAEjDhB,EAAoBY,EAAQM,QAC5BhB,EAAaU,GACbR,EAAqBQ,EAAQO,MAAM,EAAGzB,MACrC,CAACI,IAgBF,eAACsB,EAAA,EAAD,WACE,oBAAIC,UAAWhB,EAAQpC,UAAvB,+BACA,uBAAMqD,YAAU,EAACC,aAAa,MAA9B,UACE,cAACC,EAAA,EAAD,CACEH,UAAWhB,EAAQxB,MACnB4C,QAAQ,4BAFV,gCAOA,eAACC,EAAA,EAAD,CACEC,QAAQ,2BACRC,GAAG,qBACHC,MAAOnC,EACPoC,SAxBa,SAACC,GACpBpC,EAAUoC,EAAMC,OAAOH,OACvBzB,EAAqBH,EAAUkB,MAAM,EAAGY,EAAMC,OAAOH,SAkBjD,UAME,cAACI,EAAA,EAAD,CAAUJ,MAAO,GAAjB,iBACA,cAACI,EAAA,EAAD,CAAUJ,MAAO,GAAjB,oBACA,cAACI,EAAA,EAAD,CAAUJ,MAAO,GAAjB,uBAGF,cAACK,EAAA,EAAD,CACEb,UAAWhB,EAAQ5B,MACnBmD,GAAG,iBACH/C,MAAM,qBACNgD,MAAO/B,EACPgC,SA/Ba,SAACK,GACpBpC,EAAcoC,EAAEH,OAAOH,QA+BjBO,eACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,SACE,cAAC,IAAD,CAAWC,QA3CH,WAClBxC,EAAc,cA+CXX,EAAiB8B,OAAS,GACzB,oBAAGG,UAAWhB,EAAQjB,iBAAtB,iCACuBA,EADvB,qCAIA,oBAAGiC,UAAWhB,EAAQjB,iBAAtB,UACGA,EADH,sBAIF,qBAAKiC,UAAU,eAAf,SACE,cAACmB,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CACEpB,UAAWhB,EAAQhB,MACnBqD,KAAK,QACL,aAAW,gBAHb,UAKE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,aAAc,qBAAlC,UACE,eAACC,EAAA,EAAD,WAAW,oBAAI1B,UAAWhB,EAAQf,UAAvB,sBAAX,OACA,cAACyD,EAAA,EAAD,CAAWC,MAAM,OAAjB,SAAwB,oBAAI3B,UAAWhB,EAAQf,UAAvB,sBACxB,cAACyD,EAAA,EAAD,CAAWC,MAAM,OAAjB,SAAwB,oBAAI3B,UAAWhB,EAAQf,UAAvB,0BAG5B,cAAC2D,EAAA,EAAD,UACG9C,EAAkB+C,KAAI,SAACC,GAAD,OACrB,eAACP,EAAA,EAAD,CAAwBC,MAAO,CAAEC,aAAc,qBAA/C,UACE,cAACC,EAAA,EAAD,CAAWF,MAAO,CAAEjE,OAAQ,GAAKwE,UAAU,KAAKC,MAAM,MAAtD,SACE,mBAAGhC,UAAWhB,EAAQd,UAAtB,SAAkC4D,EAAIpC,aAExC,cAACgC,EAAA,EAAD,CAAWF,MAAO,CAAEjE,OAAQ,GAAKoE,MAAM,OAAvC,SACE,mBAAGH,MAAO,CAAE/D,SAAU,QAAUuC,UAAWhB,EAAQd,UAAnD,SAA+D4D,EAAIG,WAErE,cAACP,EAAA,EAAD,CAAWF,MAAO,CAAEjE,OAAQ,GAAKoE,MAAM,OAAvC,SACE,qBAEEH,MAAO,CACLU,OAAQ,OACR7E,MAAO,OACP8E,gBAAgB,aAAD,OAAeL,EAAIM,GAAnB,SACfC,eAAgB,UALb,OAASP,EAAIM,QATTN,EAAIM,oBC7KpBE,MAXf,WAIE,OACE,8BACE,cAAC,EAAD,OCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrD,MAAK,YAAkD,IAA/CsD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e9512fa5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\r\n\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n// table\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport axios from 'axios';\r\n\r\n// table\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// columnsStart\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\n\r\n\r\n// columnsEnd\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    backgroundColor: \"#212541\",\r\n    borderRadius: \"15px\",\r\n  },\r\n  titlePage: {\r\n    padding: \"15px\",\r\n    textAlign: \"center\",\r\n    color: \"#b4bae9\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"rgba(255,255,255,0.1)\",\r\n    color: \"#a6acdc\",\r\n    margin: \"20px 0px 0px 0px\",\r\n    padding: \"15px\",\r\n    width: \"100%\",\r\n    outline: \"none\",\r\n    border: 0,\r\n  },\r\n  label: {\r\n    fontSize: 14,\r\n    color: \"#e2e4f5\",\r\n    padding: \"10px\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n    color: \"#b4bae9\",\r\n  },\r\n  pos: {\r\n    marginBottom: 15,\r\n  },\r\n  answer: {\r\n    fontSize: 18,\r\n    color: \"#12eeb1\",\r\n    paddingTop: \"10px\",\r\n  },\r\n  searchTermLength: {\r\n    color: \"#e2e4f5\",\r\n    padding: \"10px\",\r\n  },\r\n  table: {\r\n    backgroundColor: \"rgba(255,255,255,0.1)\",\r\n    borderRadius: '7px'\r\n  },\r\n  tableHead: {\r\n    color: \"#e2e4f5\",\r\n    padding: \"10px 0px 10px 0px\",\r\n  },\r\n  tableBody: {\r\n    color: \"#e2e4f5\",\r\n  },\r\n});\r\n\r\nfunction TriviaList() {\r\n  \r\n  const [maxNum, setMaxNum] = useState(10);\r\n  const [triviaObj, setTriviaObj] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchTermLength, setSearchTermLength] = useState(0);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    let config = {'Authorization': 'xXrMbfBA8LOT-a78p8F9j9XVha%yh1i!cdzQK8cL2r6k6nLd%6LdafwQ4or5$dvA'};\r\n    axios.get('https://sheet.best/api/sheets/17b7dc7c-84f2-4d95-b802-560bd8b85499', config)\r\n    .then(response => {   \r\n      setTriviaObj(response.data);\r\n    })\r\n    \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const results = triviaObj.filter((man) =>\r\n      man.Question.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setSearchTermLength(results.length);\r\n    setQuestions(results);\r\n    setFilteredQuestions(results.slice(0, maxNum));\r\n  }, [searchTerm]);\r\n\r\n  const clearSearch = () => {\r\n    setSearchTerm(\"\");\r\n  };\r\n\r\n  const maxNumSelect = (event) => {\r\n    setMaxNum(event.target.value);\r\n    setFilteredQuestions(questions.slice(0, event.target.value));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h1 className={classes.titlePage}>WWE TRIVIA RUMBLE</h1>\r\n      <form noValidate autoComplete=\"off\">\r\n        <InputLabel\r\n          className={classes.label}\r\n          htmlFor=\"input-with-icon-adornment\"\r\n        >\r\n          Type Question Here\r\n        </InputLabel>\r\n        {/* <button onClick={changeMaxNum20}>20</button> */}\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={maxNum}\r\n          onChange={maxNumSelect}\r\n        >\r\n          <MenuItem value={10}>Ten</MenuItem>\r\n          <MenuItem value={20}>Twenty</MenuItem>\r\n          <MenuItem value={30}>Thirty</MenuItem>\r\n        </Select>\r\n        {/* <button onClick={changeMaxNum30}>30</button> */}\r\n        <Input\r\n          className={classes.input}\r\n          id=\"standard-basic\"\r\n          label=\"Type Question Here\"\r\n          value={searchTerm}\r\n          onChange={handleChange}\r\n          startAdornment={\r\n            <InputAdornment position=\"start\">\r\n              <ClearIcon onClick={clearSearch} />\r\n            </InputAdornment>\r\n          }\r\n        />\r\n      </form>\r\n      {searchTermLength.length > 20 ? (\r\n        <p className={classes.searchTermLength}>\r\n          This search contain {searchTermLength} registers, please specify more\r\n        </p>\r\n      ) : (\r\n        <p className={classes.searchTermLength}>\r\n          {searchTermLength} registers found\r\n        </p>\r\n      )}\r\n      <div className=\"pokemon-list\">\r\n        <TableContainer >\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"a dense table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow  style={{ borderBottom: '3px #e2e4f5 solid' }}>\r\n                <TableCell><h3 className={classes.tableHead}>Question</h3> </TableCell>\r\n                <TableCell align=\"left\"><h3 className={classes.tableHead}>Answer</h3></TableCell>\r\n                <TableCell align=\"left\"><h3 className={classes.tableHead}>Image</h3></TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredQuestions.map((row) => (\r\n                <TableRow key={row.Id}  style={{ borderBottom: '3px #e2e4f5 solid' }}>\r\n                  <TableCell style={{ border: 0 }} component=\"th\" scope=\"row\">\r\n                    <p className={classes.tableBody}>{row.Question}</p>                    \r\n                  </TableCell>\r\n                  <TableCell style={{ border: 0 }} align=\"left\">            \r\n                    <p style={{ fontSize: '18px' }} className={classes.tableBody}>{row.Answer}</p>\r\n                  </TableCell>\r\n                  <TableCell style={{ border: 0 }} align=\"left\">\r\n                    <div\r\n                      key={\"img-\" + row.Id}\r\n                      style={{\r\n                        height: \"30px\",\r\n                        width: \"30px\",\r\n                        backgroundImage: `url(./img/${row.Id}.png)`,\r\n                        backgroundSize: 'cover'\r\n                      }}\r\n                    ></div>\r\n                  </TableCell>\r\n                  {/* <TableCell align=\"right\">{row.fat}</TableCell>\r\n                  <TableCell align=\"right\">{row.carbs}</TableCell>\r\n                  <TableCell align=\"right\">{row.protein}</TableCell> */}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        {/* <Grid container spacing={3}>\r\n          {filteredQuestions.map((questionn) => (\r\n            <Grid\r\n              key={\"grid-\" + questionn.Id}\r\n              item\r\n              xs={12}\r\n              sm={12}\r\n              md={12}\r\n              lg={12}\r\n            >\r\n              <Card\r\n                key={\"card-\" + questionn.Id}\r\n                className={classes.root}\r\n                variant=\"outlined\"\r\n              >\r\n                <CardContent key={\"card-content-\" + questionn.Id}>\r\n                  <Typography\r\n                    key={\"title-\" + questionn.Id}\r\n                    className={classes.title}\r\n                    color=\"textSecondary\"\r\n                    gutterBottom\r\n                  >\r\n                    Q: {questionn.Question}\r\n                  </Typography>\r\n                  <div\r\n                    key={\"img-\" + questionn.Id}\r\n                    style={{\r\n                      height: imgNums.find((idd) => idd == questionn.Id)\r\n                        ? \"100px\"\r\n                        : \"0\",\r\n                      width: \"100px\",\r\n                      backgroundImage: `url(./img/${questionn.Id}.png)`,\r\n                    }}\r\n                  ></div>\r\n\r\n                  <Typography\r\n                    key={\"answer-\" + questionn.Id}\r\n                    variant=\"body2\"\r\n                    className={classes.answer}\r\n                    component=\"p\"\r\n                  >\r\n                    A: {questionn.Answer}\r\n                  </Typography>\r\n                </CardContent>\r\n                \r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid> */}\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TriviaList;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport TriviaList from './triviaList'\r\n\r\nfunction App() {\r\n  const sayHello = () => {\r\n    console.log('Gello')\r\n  }\r\n  return (\r\n    <div>\r\n      <TriviaList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}